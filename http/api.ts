/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * PontuaÃ­
 * The PontuaÃ­ API experience :)
 * OpenAPI spec version: 1.0
 */
export interface CreateCustomerRequest { [key: string]: unknown }

export interface CreateTenantDto {
  /** Tenant name */
  name: string;
  /** Business segment */
  segment: string;
  /** Business   CNPJ */
  cnpj: string;
}

export interface CreateTenantResponse {
  /** The ID of the created tenant */
  tenantId: string;
}

export interface GetMyTenantsResponse {
  /** The unique identifier of the tenant */
  id: string;
  /** The name of the tenant */
  name: string;
  /** The business segment of the tenant */
  segment: string;
  /** The CNPJ of the tenant */
  CNPJ: string;
  /** Indicates whether the tenant is active */
  active: boolean;
}

export type customerControllerCreateResponse201 = {
  data: void
  status: 201
}

export type customerControllerCreateResponseComposite = customerControllerCreateResponse201;

export type customerControllerCreateResponse = customerControllerCreateResponseComposite & {
  headers: Headers;
}

export const getCustomerControllerCreateUrl = () => {




  return `http://localhost:3001/customers`
}

export const customerControllerCreate = async (createCustomerRequest: CreateCustomerRequest, options?: RequestInit): Promise<customerControllerCreateResponse> => {

  const res = await fetch(getCustomerControllerCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(
        createCustomerRequest,)
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: customerControllerCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as customerControllerCreateResponse
}



/**
 * @summary Create a new tenant
 */
export type tenantControllerCreateResponse201 = {
  data: CreateTenantResponse
  status: 201
}

export type tenantControllerCreateResponse400 = {
  data: void
  status: 400
}

export type tenantControllerCreateResponseComposite = tenantControllerCreateResponse201 | tenantControllerCreateResponse400;

export type tenantControllerCreateResponse = tenantControllerCreateResponseComposite & {
  headers: Headers;
}

export const getTenantControllerCreateUrl = () => {




  return `http://localhost:3001/tenant`
}

export const tenantControllerCreate = async (createTenantDto: CreateTenantDto, options?: RequestInit): Promise<tenantControllerCreateResponse> => {

  const res = await fetch(getTenantControllerCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(
        createTenantDto,)
    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tenantControllerCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tenantControllerCreateResponse
}



/**
 * @summary Get my tenants
 */
export type tenantControllerGetMyTenantsResponse200 = {
  data: GetMyTenantsResponse[]
  status: 200
}

export type tenantControllerGetMyTenantsResponse400 = {
  data: void
  status: 400
}

export type tenantControllerGetMyTenantsResponseComposite = tenantControllerGetMyTenantsResponse200 | tenantControllerGetMyTenantsResponse400;

export type tenantControllerGetMyTenantsResponse = tenantControllerGetMyTenantsResponseComposite & {
  headers: Headers;
}

export const getTenantControllerGetMyTenantsUrl = () => {




  return `http://localhost:3001/tenant`
}

export const tenantControllerGetMyTenants = async (options?: RequestInit): Promise<tenantControllerGetMyTenantsResponse> => {

  const res = await fetch(getTenantControllerGetMyTenantsUrl(),
    {
      ...options,
      method: 'GET'


    }
  )

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: tenantControllerGetMyTenantsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as tenantControllerGetMyTenantsResponse
}
